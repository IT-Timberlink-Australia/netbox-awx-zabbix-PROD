- name: Sync NetBox hosts into Zabbix (token-only)
  hosts: all
  become: false
  connection: local
  gather_facts: false

  vars:
    zbx_url:   "{{ lookup('env','ZABBIX_API_URL') }}"
    zbx_token: "{{ lookup('env','ZABBIX_API_TOKEN') }}"
    zbx_verify: "{{ (lookup('env','ZABBIX_VERIFY') | default('false')) | bool }}"
    nb_url:    "{{ lookup('env','NETBOX_API') }}"
    nb_token:  "{{ lookup('env','NETBOX_TOKEN') }}"
    nb_verify: "{{ (lookup('env','NETBOX_VERIFY') | default('true')) | bool }}"
    ZBP_STATUS_SYNCED_VALUE: "{{ lookup('env','ZBP_STATUS_SYNCED_VALUE') | default('synced') }}"
    ZBP_STATUS_NOTSYNCED_VALUE: "{{ lookup('env','ZBP_STATUS_NOTSYNCED_VALUE') | default('not_synced') }}"

    _iface_default_ports:
      "1": "10050"
      "2": "161"
      "3": "623"
      "4": "12345"

  tasks:
    - name: Validate inputs present
      assert:
        that:
          - (zbx_url   | length) > 0
          - (zbx_token | length) > 0
          - (nb_url    | length) > 0
          - (nb_token  | length) > 0

    - name: Parse Zabbix URL (phase 1)
      set_fact:
        zbx_scheme_https: "{{ zbx_url | regex_search('^https://') is truthy }}"
        zbx_hostport: "{{ (zbx_url | regex_replace('^https?://','')) | regex_replace('/.*$','') }}"
        zbx_path_only: "{{ '/' ~ (zbx_url | regex_replace('^https?://[^/]+','') | regex_replace('^/+','')) }}"

    - name: Parse Zabbix URL (phase 2)
      set_fact:
        zbx_api: >-
          {{
            (zbx_url | regex_replace('/+$',''))
            | regex_replace('(?i)/api_jsonrpc\\.php$','')
            ~ '/api_jsonrpc.php'
          }}
        zbx_path_clean: "{{ zbx_path_only | regex_replace('/+$','') }}"
        _auth: "{{ zbx_token }}"

    - name: Parse Zabbix URL (phase 3)
      set_fact:
        zbx_pathroot: >-
          {{
            (zbx_path_clean | regex_replace('(?i)/api_jsonrpc\\.php$',''))
            | regex_replace('^$','/')
          }}

    - name: Normalize NetBox URL (clean)
      set_fact:
        _nb_clean: "{{ nb_url | regex_replace('/+$','') }}"

    - name: Derive NetBox API root and base
      set_fact:
        nb_api_root: "{{ (_nb_clean | regex_search('/api$')) | ternary(_nb_clean, _nb_clean ~ '/api') }}"
        nb_base:     "{{ _nb_clean | regex_replace('/api$','') }}"

    - name: Probe NetBox CF zbp_last_sync
      uri:
        url: "{{ nb_api_root }}/extras/custom-fields/?name=zbp_last_sync"
        method: GET
        headers: { Authorization: "Token {{ nb_token }}", Accept: "application/json" }
        return_content: true
        status_code: 200
        validate_certs: "{{ nb_verify }}"
      register: _probe_last_sync

    - name: Probe NetBox CF zbp_sync_hint
      uri:
        url: "{{ nb_api_root }}/extras/custom-fields/?name=zbp_sync_hint"
        method: GET
        headers: { Authorization: "Token {{ nb_token }}", Accept: "application/json" }
        return_content: true
        status_code: 200
        validate_certs: "{{ nb_verify }}"
      register: _probe_sync_hint

    - name: Set CF presence flags
      set_fact:
        _has_last_sync: "{{ (_probe_last_sync.json.results | default([]) | length) > 0 }}"
        _has_sync_hint: "{{ (_probe_sync_hint.json.results | default([]) | length) > 0 }}"

    - name: Normalize host vars from NetBox
      vars:
        cf: "{{ hostvars[inventory_hostname].custom_fields | default({}) }}"
      set_fact:
        _nb_name: "{{ inventory_hostname }}"
        _nb_visible: "{{ cf.zbp_vname | default(inventory_hostname) }}"
        _tmpl_primary_id: "{{ (cf.zbp_pri_template_name_id | string) if (cf.zbp_pri_template_name_id is defined) else '' }}"
        _tmpl_extra_ids_raw: "{{ cf.zb_extra_templates | default([]) }}"
        _iface_type: "{{ (cf.zbp_pri_template_int_id | string) if (cf.zbp_pri_template_int_id is defined) else '' }}"
        _iface_ip: "{{ cf.zbp_int_ip | default('') }}"
        _group_id: "{{ (cf.zbp_group_id | string) if (cf.zbp_group_id is defined) else '' }}"
        _tag_env: "{{ cf.zb_mon_env | default('') }}"
        _tag_os: "{{ cf.zbp_platform | default('') }}"
        _tag_site: "{{ cf.zbp_site | default('') }}"
        _tag_sla: "{{ cf.zbp_sla_code | default('') }}"
        _tag_nb_status: "{{ hostvars[inventory_hostname].status.value | default('') }}"
        _proxy_cf_raw: "{{ cf.zbp_proxy_id | default('') }}"

    - name: Coerce extra templates to list
      set_fact:
        _tmpl_extra_ids: >-
          {{
            (
              _tmpl_extra_ids_raw
              if (_tmpl_extra_ids_raw is sequence and (_tmpl_extra_ids_raw is not string))
              else ( [ _tmpl_extra_ids_raw ] if (_tmpl_extra_ids_raw | default('') | length > 0) else [] )
            )
            | map('string') | list
          }}

    - name: Build desired template id list
      set_fact:
        _desired_template_ids: >-
          {{
            ( [ _tmpl_primary_id ] if _tmpl_primary_id | length > 0 else [] )
            | union(_tmpl_extra_ids)
            | unique
          }}

    - name: Fail fast if key inputs are missing
      assert:
        that:
          - _iface_ip | length > 0
          - _iface_type | length > 0
          - _desired_template_ids | length > 0
          - _group_id | length > 0
        fail_msg: "Missing IP/interface/template/group for {{ inventory_hostname }}"

    - name: Convert IDs to ints
      set_fact:
        _group_ids_int: [ "{{ _group_id | int }}" ]
        _tmpl_ids_int: "{{ _desired_template_ids | map('int') | list }}"

    - name: Build interface details (SNMP only)
      set_fact:
        _iface_details: "{{ {'version': 2, 'community': '{$SNMP_COMMUNITY}', 'bulk': 1} if (_iface_type | int) == 2 else omit }}"

    - name: Normalize proxy id (robust)
      set_fact:
        _proxy_id_int: "{{ ((_proxy_cf_raw | string) | regex_search('\\d+') | default('0')) | int }}"

    - name: Validate proxy id in Zabbix (when provided)
      when: (_proxy_id_int | int) > 0
      uri:
        url: "{{ zbx_api }}"
        method: POST
        headers: { Content-Type: "application/json-rpc" }
        body_format: json
        validate_certs: "{{ zbx_verify }}"
        body:
          jsonrpc: "2.0"
          method: "proxy.get"
          id: 41
          auth: "{{ _auth }}"
          params:
            output: [ "proxyid", "name" ]
            proxyids: [ "{{ _proxy_id_int }}" ]
      register: _proxy_chk

    - name: Assert proxy exists or visible to the token
      when: (_proxy_id_int | int) > 0
      assert:
        that: [ (_proxy_chk.json.result | length | int) == 1 ]
        fail_msg: "Zabbix proxy id {{ _proxy_id_int }} not found or token lacks permission."

    - name: Zabbix host upsert + reconcile + NetBox writeback
      block:

        - name: ZBX host.get by name
          uri:
            url: "{{ zbx_api }}"
            method: POST
            headers: { Content-Type: "application/json-rpc" }
            body_format: json
            validate_certs: "{{ zbx_verify }}"
            body:
              jsonrpc: "2.0"
              method: "host.get"
              id: 1
              auth: "{{ _auth }}"
              params:
                filter: { host: [ "{{ _nb_name }}" ] }
                output: [ "hostid", "name", "host", "proxy_hostid" ]
          register: _host_get

        # Normalize whatever the previous task registered to â†’ _zbx_get
        - name: Normalize host.get result variable
          set_fact:
            _zbx_get: >-
              {{
                zbx_get
                | default(zbx_host_get, true)
                | default(zabbix_get, true)
                | default(zbx_by_name, true)
                | default({}, true)
              }}

        # Always set something; never feed set_fact an empty dict again
        - name: Cache hostid if exists (safe)
          set_fact:
            _zbx_hostid: >-
              {{
                (_zbx_get.json.result | default([]) | length) > 0
                | ternary((_zbx_get.json.result[0].hostid | string), None)
              }}
            _zbx_exists: "{{ (_zbx_get.json.result | default([]) | length) > 0 }}"

        - name: Cache hostid if exists
          set_fact:
            _zbx_hostid: >-
              {{ (zbx_get.json.result | default([]) | length) > 0
                 | ternary((zbx_get.json.result[0].hostid | string), None) }}
            _zbx_exists: "{{ (zbx_get.json.result | default([]) | length) > 0 }}"
        - name: Build Zabbix arrays
          set_fact:
            _zbx_groups_json: >-
              [{% for gid in _group_ids_int %}{"groupid":"{{ gid }}"}{% if not loop.last %},{% endif %}{% endfor %}]
            _zbx_templates_json: >-
              [{% for tid in _tmpl_ids_int %}{"templateid":"{{ tid }}"}{% if not loop.last %},{% endif %}{% endfor %}]
            _zbx_tags_json: >-
              [
                {"tag":"cmdb","value":"true"}
                {% if _tag_env|default('') %}, {"tag":"environment","value":"{{ _tag_env }}"}{% endif %}
                {% if _tag_os|default('') %}, {"tag":"os","value":"{{ _tag_os }}"}{% endif %}
                {% if _tag_site|default('') %}, {"tag":"site","value":"{{ _tag_site }}"}{% endif %}
                {% if _tag_sla|default('') %}, {"tag":"device","value":"{{ _tag_sla }}"}{% endif %}
                {% if _tag_nb_status|default('') %}, {"tag":"nb_status","value":"{{ _tag_nb_status }}"}{% endif %}
              ]

        - name: ZBX host.create (if absent)
          when: _zbx_hostid is none
          uri:
            url: "{{ zbx_api }}"
            method: POST
            headers: { Content-Type: "application/json-rpc" }
            body_format: json
            validate_certs: "{{ zbx_verify }}"
            body:
              jsonrpc: "2.0"
              method: "host.create"
              id: 2
              auth: "{{ _auth }}"
              params:
                host: "{{ _nb_name }}"
                name: "{{ _nb_visible }}"
                groups: "{{ _zbx_groups_json | from_yaml }}"
                templates: "{{ _zbx_templates_json | from_yaml }}"
                proxy_hostid: "{{ ((_proxy_id_int | int) > 0) | ternary((_proxy_id_int | int) | string, '0') }}"
                tags: "{{ _zbx_tags_json | from_yaml }}"
                interfaces:
                  - type: "{{ _iface_type | int }}"
                    main: 1
                    useip: 1
                    ip: "{{ _iface_ip }}"
                    dns: ""
                    port: "{{ _iface_default_ports[_iface_type] | default('10050') }}"
                    details: "{{ _iface_details | default(omit) }}"
          register: _host_create

        - name: Cache hostid from create
          when: _hostid is not defined
          set_fact:
            _hostid: "{{ _host_create.json.result.hostids[0] }}"

        - name: ZBX host.update (if present)
          when: _zbx_hostid is not none
          uri:
            url: "{{ zbx_api }}"
            method: POST
            headers: { Content-Type: "application/json-rpc" }
            body_format: json
            validate_certs: "{{ zbx_verify }}"
            body:
              jsonrpc: "2.0"
              method: "host.update"
              id: 3
              auth: "{{ _auth }}"
              params:
                hostid: "{{ _hostid }}"
                host: "{{ _nb_name }}"
                name: "{{ _nb_visible }}"
                groups: "{{ _zbx_groups_json | from_yaml }}"
                templates: "{{ _zbx_templates_json | from_yaml }}"
                proxy_hostid: "{{ ((_proxy_id_int | int) > 0) | ternary((_proxy_id_int | int) | string, '0') }}"
                tags: "{{ _zbx_tags_json | from_yaml }}"
       
        - name: Fetch interfaces
          uri:
            url: "{{ zbx_api }}"
            method: POST
            headers: { Content-Type: "application/json-rpc" }
            body_format: json
            return_content: true
            validate_certs: "{{ zbx_verify }}"
            body:
              jsonrpc: "2.0"
              method: "host.get"
              id: 5
              auth: "{{ _auth }}"
              params:
                output: [ "hostid" ]
                selectTags: [ "tag", "value" ]
                selectInterfaces: [ "interfaceid", "type", "ip", "main" ]
                hostids: [ "{{ _hostid }}" ]
          register: _hostget2

        - name: Current host facts
          set_fact:
            _cur_tags: "{{ _hostget2.json.result[0].tags | default([]) }}"
            _cur_ifaces: "{{ _hostget2.json.result[0].interfaces | default([]) }}"

        - name: Ensure primary interface matches desired
          vars:
            _match: "{{ _cur_ifaces | selectattr('main','equalto','1') | selectattr('type','equalto', (_iface_type | int)) | selectattr('ip','equalto', _iface_ip) | list }}"
          block:
            - name: Delete all existing interfaces if they dont match
              when: _match | length == 0 and _cur_ifaces | length > 0
              uri:
                url: "{{ zbx_api }}"
                method: POST
                headers: { Content-Type: "application/json-rpc" }
                body_format: json
                validate_certs: "{{ zbx_verify }}"
                body:
                  jsonrpc: "2.0"
                  method: "hostinterface.delete"
                  id: 6
                  auth: "{{ _auth }}"
                  params: "{{ _cur_ifaces | map(attribute='interfaceid') | list }}"

            - name: Create desired primary interface (if needed)
              when: _match | length == 0
              uri:
                url: "{{ zbx_api }}"
                method: POST
                headers: { Content-Type: "application/json-rpc" }
                body_format: json
                validate_certs: "{{ zbx_verify }}"
                body:
                  jsonrpc: "2.0"
                  method: "hostinterface.create"
                  id: 7
                  auth: "{{ _auth }}"
                  params:
                    hostid: "{{ _hostid }}"
                    main: 1
                    type: "{{ _iface_type | int }}"
                    useip: 1
                    ip: "{{ _iface_ip }}"
                    dns: ""
                    port: "{{ _iface_default_ports[_iface_type] | default('10050') }}"
                    details: "{{ _iface_details | default(omit) }}"

        - name: Build success payload
          set_fact:
            _cf_success: >-
              {{
                {'zbp_status': ZBP_STATUS_SYNCED_VALUE}
                | combine(
                    (_has_last_sync|bool) | ternary({'zbp_last_sync': lookup('pipe','date -Is')}, {}),
                    recursive=True
                  )
                | combine(
                    (_has_sync_hint|bool) | ternary({'zbp_sync_hint': ''}, {}),
                    recursive=True
                  )
              }}

        - name: Success writeback â†’ NetBox (Device)
          when: not (hostvars[inventory_hostname].is_virtual | default(false))
          delegate_to: localhost
          netbox.netbox.netbox_device:
            netbox_url: "{{ nb_base }}"
            netbox_token: "{{ nb_token }}"
            validate_certs: "{{ nb_verify }}"
            data:
              name: "{{ _nb_name }}"
              custom_fields: "{{ _cf_success }}"
            state: present

        - name: Success writeback â†’ NetBox (VM)
          when: hostvars[inventory_hostname].is_virtual | default(false)
          delegate_to: localhost
          netbox.netbox.netbox_virtual_machine:
            netbox_url: "{{ nb_base }}"
            netbox_token: "{{ nb_token }}"
            validate_certs: "{{ nb_verify }}"
            data:
              name: "{{ _nb_name }}"
              custom_fields: "{{ _cf_success }}"
            state: present

      rescue:
        - name: Capture error
          set_fact:
            _sync_err: "{{ (ansible_failed_result.msg | default(ansible_failed_task.name | default('Zabbix sync failed'))) }}"

        - name: Sanitize sync error string
          set_fact:
            _sync_err_safe: >-
              {{
                (_sync_err | string)
                | regex_replace('[\r\n]+',' | ')
                | regex_replace('{{','âŸªâŸª') | regex_replace('}}','âŸ«âŸ«') | regex_replace('#','ï¹Ÿ')
              }}

        - name: Build failure payload
          set_fact:
            _cf_fail: >-
              {{
                {'zbp_status': ZBP_STATUS_NOTSYNCED_VALUE}
                | combine( (_has_sync_hint|bool) | ternary({'zbp_sync_hint': _sync_err_safe}, {}), recursive=True)
              }}

        - name: Failure writeback â†’ NetBox (Device)
          when: not (hostvars[inventory_hostname].is_virtual | default(false))
          delegate_to: localhost
          netbox.netbox.netbox_device:
            netbox_url: "{{ nb_base }}"
            netbox_token: "{{ nb_token }}"
            validate_certs: "{{ nb_verify }}"
            data:
              name: "{{ _nb_name }}"
              custom_fields: "{{ _cf_fail }}"
            state: present

        - name: Failure writeback â†’ NetBox (VM)
          when: hostvars[inventory_hostname].is_virtual | default(false)
          delegate_to: localhost
          netbox.netbox.netbox_virtual_machine:
            netbox_url: "{{ nb_base }}"
            netbox_token: "{{ nb_token }}"
            validate_certs: "{{ nb_verify }}"
            data:
              name: "{{ _nb_name }}"
              custom_fields: "{{ _cf_fail }}"
            state: present