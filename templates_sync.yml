---
- name: Sync Zabbix template IDs from NetBox Custom Object rows back into NetBox
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # -------- NetBox from AWX env --------
    netbox_api_url: "{{ lookup('env','NETBOX_API') | default('', true) }}"
    netbox_token:   "{{ lookup('env','NETBOX_TOKEN') | default('', true) }}"
    nb_validate_certs: true

    # Your Custom Object collection (correct plugin slug + trailing slash)
    co_collection_endpoint: "/api/plugins/custom-objects/zabbix-template-list/"

    # Field names in your Custom Object
    name_field: "template_name"
    id_field:   "template_id"     # lower-case matches your API

    # -------- Zabbix from AWX env (API token) --------
    zabbix_api_url:   "{{ lookup('env','ZABBIX_API_URL') | default('', true) }}"   # e.g. https://itmonitor.example.com/zabbix OR full .../api_jsonrpc.php
    zabbix_api_token: "{{ lookup('env','ZABBIX_API_TOKEN') | default('', true) }}"
    zbx_validate_certs: true
    zbx_filter_key: "name"  # set to 'host' if your names are Zabbix technical keys

    # -------- Outputs --------
    nb_page_size: 200
    out_json: "zbx_template_ids_from_nb.json"
    out_csv:  "zbx_template_ids_from_nb.csv"

  tasks:
    - name: Fail if required NetBox/Zabbix env vars are missing
      assert:
        that:
          - netbox_api_url | length > 0
          - netbox_token   | length > 0
          - zabbix_api_url | length > 0
          - zabbix_api_token | length > 0
        fail_msg: "Set NETBOX_API/NETBOX_TOKEN and ZABBIX_API_URL/ZABBIX_API_TOKEN in AWX env."

    - name: Normalize NetBox custom object collection URL
      set_fact:
        _co_base: >-
          {{
            (co_collection_endpoint.startswith('http')
              | ternary(co_collection_endpoint.rstrip('/'),
                        (netbox_api_url.rstrip('/') ~ '/' ~ co_collection_endpoint.lstrip('/')).rstrip('/')))
          }}

    # --- Build a clean Zabbix endpoint: ensure exactly one '/api_jsonrpc.php'
    - name: Build Zabbix API endpoint URL robustly
      set_fact:
        _zbx_endpoint: >-
          {{
            (zabbix_api_url
              | regex_replace('/api_jsonrpc\\.php/?$', '')) ~ '/api_jsonrpc.php'
          }}

    - name: Get collection count (paged API)
      uri:
        url: "{{ _co_base }}?limit=1"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
          Accept: "application/json"
        return_content: true
        validate_certs: "{{ nb_validate_certs }}"
        status_code: [200]
      register: nb_count_res

    - name: Compute count
      set_fact:
        _nb_count: "{{ nb_count_res.json.count
                      | default((nb_count_res.json.results | length) | default(0)) }}"

    - name: Compute offsets
      set_fact:
        _offsets: "{{ range(0, (_nb_count | int), (nb_page_size | int)) | list }}"

    - name: Fetch all pages
      loop: "{{ _offsets if (_nb_count | int) > 0 else [0] }}"
      loop_control:
        label: "offset={{ item }}"
      uri:
        url: "{{ _co_base }}?limit={{ nb_page_size }}&offset={{ item }}"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
          Accept: "application/json"
        return_content: true
        validate_certs: "{{ nb_validate_certs }}"
        status_code: [200]
      register: nb_pages

    - name: Accumulate NetBox rows (paginated)
      set_fact:
        _nb_rows: >-
          {{
            (nb_pages.results
              | map(attribute='json')
              | map(attribute='results', default=[])
              | list
              | flatten)
          }}

    - name: Fallback for unpaginated responses
      when: _nb_rows | length == 0 and (nb_pages.results | length) > 0
      set_fact:
        _nb_rows: >-
          {{
            nb_pages.results[0].json
            if (nb_pages.results[0].json is sequence)
            else (nb_pages.results[0].json.results | default([]))
          }}

    - name: Extract template names from NetBox rows
      set_fact:
        _names: "{{ (_names | default([])) + [ (item[name_field] | string) ] }}"
      loop: "{{ _nb_rows }}"
      when: item[name_field] is defined and (item[name_field] | string | length) > 0

    - name: Fail if no names found in NetBox rows
      fail:
        msg: "No '{{ name_field }}' values found in NetBox custom object collection."
      when: (_names | default([])) | length == 0

    # --- Build the Zabbix 'filter' dict with a dynamic key (this avoids the Jinja key-not-rendering bug)
    - name: Build Zabbix filter object
      set_fact:
        _zbx_filter: "{{ { (zbx_filter_key): _names } }}"

    # -------- Zabbix template.get using API token --------
    - name: Query Zabbix template IDs (exact match)
      uri:
        url: "{{ _zbx_endpoint }}"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
          Authorization: "Bearer {{ zabbix_api_token }}"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            output: ["templateid","name","host"]
            filter: "{{ _zbx_filter }}"
          auth: "{{ zabbix_api_token }}"     # optional; header is the real auth
          id: 1
        return_content: true
        validate_certs: "{{ zbx_validate_certs }}"
        status_code: [200]
      register: zbx_templates_res

    - name: Build maps from Zabbix results
      set_fact:
        _zbx_rows: "{{ zbx_templates_res.json.result | default([]) }}"
        _map_by_name: "{{ dict((_zbx_rows | map(attribute='name') | list) | zip(_zbx_rows | map(attribute='templateid') | list)) }}"
        _map_by_host: "{{ dict((_zbx_rows | map(attribute='host') | list) | zip(_zbx_rows | map(attribute='templateid') | list)) }}"
        _use_map: "{{ _map_by_name if zbx_filter_key == 'name' else _map_by_host }}"
        _returned_keys: "{{ _zbx_rows | map(attribute=zbx_filter_key) | list }}"
        _missing_names: "{{ _names | difference(_returned_keys) }}"

    - name: Show name -> templateid map (from Zabbix)
      debug:
        var: _use_map

    - name: Warn for names not found in Zabbix
      when: _missing_names | length > 0
      debug:
        msg: "No exact Zabbix match for: {{ _missing_names | join(', ') }}"

    # -------- Prepare and send NetBox PATCHes where ID changed --------
    - name: Compute pending updates for NetBox
