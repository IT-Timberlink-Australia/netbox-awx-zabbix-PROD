---
- name: Sync Zabbix template IDs back into NetBox custom object
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    netbox_api_url: "{{ lookup('env', 'NETBOX_API') }}"
    netbox_token: "{{ lookup('env', 'NETBOX_TOKEN') }}"
    zabbix_api_url: "{{ lookup('env', 'ZABBIX_API_URL') }}"
    zabbix_api_token: "{{ lookup('env', 'ZABBIX_API_TOKEN') }}"

    # NetBox Custom Object collection path (NetBox 4.3.x “Custom Objects” plugin)
    nb_collection_url: "{{ netbox_api_url }}/plugins/custom-objects/zabbix-template-list/"
    page_size: 200

    # Flip to false if you ever want a dry-run that does no PATCH
    apply_changes: true

  tasks:
    - name: Fetch all custom object rows (single page is enough for <200)
      uri:
        url: "{{ nb_collection_url }}?limit={{ page_size }}&offset=0"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
          Accept: "application/json"
        return_content: true
        validate_certs: false
      register: nb_page
      failed_when: nb_page.status not in [200]

    - name: Collect NetBox rows
      set_fact:
        _nb_rows: "{{ nb_page.json.results | default([]) }}"

    - name: Build list of template names from NetBox
      set_fact:
        _names: "{{ _nb_rows | map(attribute='template_name') | list | unique }}"

    - name: Fail if no names found (safety)
      fail:
        msg: "No template names found in NetBox rows."
      when: (_names | length) == 0

    - name: Query Zabbix template IDs (exact match on name)
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
          Authorization: "Bearer {{ zabbix_api_token }}"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            filter:
              name: "{{ _names }}"
            output: ["templateid","name","host"]
          auth: "{{ zabbix_api_token }}"
          id: 1
        return_content: true
        validate_certs: false
      register: zbx_resp
      failed_when: zbx_resp.status not in [200] or (zbx_resp.json.result is not defined)

    - name: Flatten Zabbix results
      set_fact:
        _zbx_rows: "{{ zbx_resp.json.result | default([]) }}"

    - name: Build name→id and host→id maps
      set_fact:
        _by_name: "{{ dict((_zbx_rows | map(attribute='name') | list) | zip(_zbx_rows | map(attribute='templateid') | list)) }}"
        _by_host: "{{ dict((_zbx_rows | map(attribute='host') | list) | zip(_zbx_rows | map(attribute='templateid') | list)) }}"

    - name: Prefer the map that fully covers our NetBox names (host if perfect, else name)
      set_fact:
        _zbx_map: >-
          {{ _by_host
             if (_names | difference((_by_host.keys() | list))) | length == 0
             else _by_name }}

    - name: Compute desired template_id for each NetBox row
      set_fact:
        _desired_pairs: >-
          {{ _nb_rows | map('extract', attribute='template_name') | list
             | zip(_nb_rows | list)
             | map('list')
             | map('last')
             | list }}
      vars:
        # not used directly; _zbx_map is referenced in the loop below
        _dummy: ""

    - name: PATCH NetBox rows where template_id is missing or different
      uri:
        url: "{{ item.url }}"
        method: PATCH
        headers:
          Authorization: "Token {{ netbox_token }}"
          Accept: "application/json"
          Content-Type: "application/json"
        body_format: json
        body:
          template_id: "{{ _zbx_map[item.template_name] }}"
        status_code: [200]
        return_content: true
        validate_certs: false
      loop: "{{ _nb_rows }}"
      loop_control:
        label: "{{ item.id }}: {{ item.template_name }}"
      when:
        - _zbx_map[item.template_name] is defined
        - (item.template_id | default('')) | string != (_zbx_map[item.template_name] | string)
        - apply_changes | bool
      register: patch_results
      changed_when: true

    - name: Summary
      debug:
        msg:
          updated: "{{ (patch_results.results | default([])) | length }}"
          total_rows: "{{ _nb_rows | length }}"
          missing_in_zabbix: "{{ _names | difference((_zbx_map.keys() | list)) }}"
