# templates_sync.yml
---
- name: Sync Zabbix template IDs from NetBox Custom Object rows back into NetBox (cert checks OFF)
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # -------- NetBox from AWX env --------
    netbox_api_url: "{{ lookup('env','NETBOX_API') | default('', true) }}"
    netbox_token:   "{{ lookup('env','NETBOX_TOKEN') | default('', true) }}"

    # Use the real API path (NOT the HTML UI path)
    nb_collection_url: "{{ (netbox_api_url | trim | regex_replace('/+$','')) ~ '/api/plugins/custom-objects/zabbix-template-list/' }}"

    # Field names in your Custom Object
    name_field: "template_name"
    id_field:   "template_id"

    # -------- Zabbix from AWX env (API token) --------
    zabbix_api_url_raw: "{{ lookup('env','ZABBIX_API_URL') | default('', true) }}"
    zabbix_api_token:   "{{ lookup('env','ZABBIX_API_TOKEN') | default('', true) }}"
    # Use 'host' if your NetBox names are Zabbix technical keys instead of display names
    zbx_filter_key: "name"

    # -------- Paging & Outputs --------
    page_size: 200
    out_json: "zbx_template_ids_from_nb.json"
    out_csv:  "zbx_template_ids_from_nb.csv"

  tasks:
    - name: Hard-fail if required env vars are missing
      assert:
        that:
          - netbox_api_url | length > 0
          - netbox_token   | length > 0
          - zabbix_api_url_raw | length > 0
          - zabbix_api_token | length > 0
        fail_msg: "Set NETBOX_API/NETBOX_TOKEN and ZABBIX_API_URL/ZABBIX_API_TOKEN in AWX env."

    - name: Build Zabbix API endpoint URL (dedupe any trailing api_jsonrpc.php)
      set_fact:
        zabbix_api_url: "{{ (zabbix_api_url_raw | trim
                               | regex_replace('(/api_jsonrpc\\.php)+/?$', '')
                               | regex_replace('/+$', '')) ~ '/api_jsonrpc.php' }}"

    # ---- NetBox: fetch rows ----
    - name: Fetch NetBox custom object rows (page 1)
      uri:
        url: "{{ nb_collection_url }}?limit={{ page_size }}&offset=0"
        method: GET
        headers:
          Authorization: "Token {{ netbox_token }}"
          Accept: "application/json"
        return_content: true
        validate_certs: false
      register: nb_page
      failed_when: >
        nb_page.status not in [200] or
        ((nb_page.content_type | default('') | lower) | regex_search('text/html'))
        - name: Collect NetBox rows
          set_fact:
            _nb_rows: "{{ nb_page.json.results | default([]) }}"

    - name: Extract template names from NetBox rows
      set_fact:
        _names: >-
          {{ _nb_rows
             | selectattr(name_field, 'defined')
             | map(attribute=name_field)
             | reject('equalto','')
             | list
             | unique }}

    - name: Fail if no names found
      fail:
        msg: "No '{{ name_field }}' values found in NetBox custom object collection."
      when: (_names | length) == 0

    # ---- Zabbix: query template IDs ----
    - name: Build Zabbix filter object (dynamic key)
      set_fact:
        _zbx_filter: "{{ { (zbx_filter_key): _names } }}"

    - name: Query Zabbix template IDs (exact match)
      uri:
        url: "{{ zabbix_api_url }}"
        method: POST
        headers:
          Content-Type: "application/json-rpc"
          Authorization: "Bearer {{ zabbix_api_token }}"
        body_format: json
        body:
          jsonrpc: "2.0"
          method: "template.get"
          params:
            output: ["templateid","name","host"]
            filter: "{{ _zbx_filter }}"
          auth: "{{ zabbix_api_token }}"
          id: 1
        return_content: true
        validate_certs: false
        status_code: [200]
      register: zbx_templates_res

    - name: Capture Zabbix rows
      set_fact:
        _zbx_rows: "{{ zbx_templates_res.json.result | default([]) }}"

    - name: Build name -> id map
      set_fact:
        _map_by_name: "{{ dict((_zbx_rows | map(attribute='name') | list) | zip(_zbx_rows | map(attribute='templateid') | list)) }}"

    - name: Build host -> id map
      set_fact:
        _map_by_host: "{{ dict((_zbx_rows | map(attribute='host') | list) | zip(_zbx_rows | map(attribute='templateid') | list)) }}"

    - name: Choose active map (prefer host if it fully covers our names)
      set_fact:
        _zbx_map: >-
          {{ _map_by_host
             if (_names | difference((_map_by_host.keys() | list))) | length == 0
             else _map_by_name }}

    # ---- SPLIT these so ordering is correct
    - name: Compute returned keys (from Zabbix)
      set_fact:
        _returned_keys: "{{ _zbx_rows | map(attribute=zbx_filter_key) | list }}"

    - name: Compute names missing in Zabbix
      set_fact:
        _missing_names: "{{ _names | difference(_returned_keys | default([])) }}"

    - name: Show name -> templateid map (from Zabbix)
      debug:
        var: _zbx_map

    - name: Warn for names not found in Zabbix
      when: _missing_names | length > 0
      debug:
        msg: "No exact Zabbix match for: {{ _missing_names | join(', ') }}"

    # ---- PATCH back to NetBox where needed ----
    - name: Compute pending updates for NetBox (ONLY where template_id is empty/null)
      set_fact:
        _updates: "{{ (_updates | default([])) + [ {
                   'url': nb_collection_url ~ item.id ~ '/',
                   'name': item[name_field],
                   'current': item[id_field] | default(''),
                   'new_id': _zbx_map[item[name_field]]
                 } ] }}"
      loop: "{{ _nb_rows }}"
      when:
        - item[name_field] is defined
        - _zbx_map.get(item[name_field]) is defined
        - (item[id_field] is not defined) or (((item[id_field] | string) | trim) == '')

    - name: PATCH template_id for each changed row in NetBox
      when: (_updates | default([])) | length > 0
      loop: "{{ _updates }}"
      loop_control:
        label: "{{ item.name }}"
      uri:
        url: "{{ item.url }}"
        method: PATCH
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: "application/json"
          Accept: "application/json"
        body_format: json
        body:
          template_id: "{{ item.new_id }}"
        status_code: [200, 204]
        return_content: true
        validate_certs: false
      register: nb_patch_results

    - name: Summary
      debug:
        msg:
          total_rows: "{{ _nb_rows | length }}"
          updated: "{{ (nb_patch_results.results | default([])) | length }}"
          skipped_non_empty: "{{ (_nb_rows | selectattr(id_field,'defined') | rejectattr(id_field,'equalto','') | list | length) }}"
          missing_in_zabbix: "{{ _missing_names | default([]) | list }}"

    - name: Write JSON (name -> id map)
      copy:
        dest: "{{ out_json }}"
        content: "{{ _zbx_map | to_nice_json }}"
      delegate_to: localhost

    - name: Write CSV from NetBox rows (name,existing_id,new_id)
      copy:
        dest: "{{ out_csv }}"
        content: |
          name,existing_id,new_id
          {% for r in _nb_rows %}
          {% set new = _zbx_map.get(r[name_field]) | default('') %}
          {{ r[name_field] }},{{ r[id_field] | default('') }},{{ new }}
          {% endfor %}
      delegate_to: localhost
